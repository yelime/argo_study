/** programmers 문제풀이
 * 
 * ==========================================
 * 두 정수 사이의 합
 * 
 * 문제 설명
 * 두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
 * 예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.
 * 
 * 제한 조건
 *  a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
 *  a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
 *  a와 b의 대소관계는 정해져있지 않습니다.
 * 
 * 입출력 예
 * a	b	return
 * 3	5	12
 * 3	3	3
 * 5	3	12
 * ===================================
 * 
 * 두 정수 사이의 합은 반복문을 돌려서 구할 수도 있지만 이 문제는 수학적인 방법을 통해 쉽게
 * 답을 도출해 낼 수 있다. 흔한 등차수열의 합을 이용해서 구할 수 있다.
 * 
 */
public class study13 {
    public long solution(int a, int b) {
        //시작과 끝이 같을 경우 바로 반환한다.
        if(a==b){
            return (long)a;
        }
        
        long answer = (long)a+b;
        //-1 1 과 같이 부호가 반대일 경우 0을 반환
        if(answer==0){
            return 0;
        }
        //만약 역순으로 배정될 경우 두 수를 스왑해준다.
        if(a>b){
            int tmp = a;
            a = b;
            b = tmp;
        }
        //두 수의 부호가 다르다면 상쇄되는 것을 제거한다.
        if(a<0&&b>0){
            if(answer<0){
                b=b*(-1)-1;
            }
            else {
                a=a*(-1)+1;
            }
            answer = (long)a+b;
        }
        //만약 상쇄후 a와 b가 같은 값이라면 바로 반환
        if(a==b){
            return (long)a;
        }
        //등차수열 합의 조건인 같은 부호를 맞췄으므로 등차수열의 합 공식을 사용하면 된다.
        //단, 음수의 경우는 잠시 양수로 바꿨다 다시 음수로 바꿔주면 된다.
        if(a>0){
            if(answer%2==1){
                answer=answer*((b-a)/2+1);
            }
            else {
                answer = answer*((b-a)/2)+answer/2;
            }
        }
        else {
            answer *= -1;
            if(answer%2==1){
                answer=answer*((b-a)/2+1);
            }
            else {
                answer = answer*((b-a)/2)+answer/2;
            }
            answer *= -1;
        }
        return answer;
    }
}

/**
 * 실행 결과 반복문을 돌렸다면 실행 결과는 천차만별이였겠지만 등차수열의 합을 쓴 덕분에
 * 실행 결과는 안정적인 결과를 볼 수 있다.
 * 테스트 1 〉	통과 (0.02ms, 52.5MB)
 * 테스트 2 〉	통과 (0.02ms, 52.3MB)
 * 테스트 3 〉	통과 (0.02ms, 52MB)
 * 테스트 4 〉	통과 (0.02ms, 52.3MB)
 * 테스트 5 〉	통과 (0.03ms, 53.4MB)
 * 테스트 6 〉	통과 (0.03ms, 52.6MB)
 * 테스트 7 〉	통과 (0.02ms, 52.1MB)
 * 테스트 8 〉	통과 (0.02ms, 52.6MB)
 * 테스트 9 〉	통과 (0.02ms, 52.9MB)
 * 테스트 10 〉	통과 (0.02ms, 53.1MB)
 * 테스트 11 〉	통과 (0.02ms, 52.3MB)
 * 테스트 12 〉	통과 (0.02ms, 52.9MB)
 * 테스트 13 〉	통과 (0.02ms, 58.1MB)
 * 테스트 14 〉	통과 (0.02ms, 52.2MB)
 * 테스트 15 〉	통과 (0.02ms, 52.2MB)
 * 테스트 16 〉	통과 (0.03ms, 52.2MB)
 */