/** programmers 문제풀이
 * 
 * ==========================================
 * 같은 숫자는 싫어
 * 
 * 문제 설명
 * 배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 예를 들면,
 * 
 * arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
 * arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
 * 배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.
 * 
 * 제한사항
 * 배열 arr의 크기 : 1,000,000 이하의 자연수
 * 배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수
 * 
 * 입출력 예
 * arr	            answer
 * [1,1,3,3,0,1,1]	[1,3,0,1]
 * [4,4,4,3,3]	    [4,3]
 * ===================================
 * 
 * 모든 숫자가 한번씩만 쓰이는 것이라면 bool배열을 사용하는 방법을 쓸 수 있지만
 * 연속되는 숫자만 판단해야 하므로 arr배열에서 idx를 활용해서 기존 arr배열에 덮어쓰는 방식을
 * 활용해서 arr배열을 재활용하고 끝까지 검사를 마치면 idx를 기준으로 배열을 만들어
 * 결과를 반환하는 방법을 사용하였다.
 * 
 */

public class study11 {
    public int[] solution(int []arr) {
        int idx = 1;
        int tmp = arr[0];
        for(int i =1;i<arr.length;i++){
            //만약 중복일 경우 다음 번호를 체크한다.
            if(arr[i] == tmp){
                continue;
            }
            arr[idx++] = arr[i];
            tmp = arr[i];
        }
        //정답 배열 만들기
        int[] answer = new int[idx];
        for(int i =0;i<idx;i++){
            answer[i]=arr[i];
        }
        
        return answer;
    }
}

/**
 * 실행 결과
 * 정확성 테스트
 * 테스트 1 〉	통과 (0.01ms, 52.9MB)
 * 테스트 2 〉	통과 (0.02ms, 53.1MB)
 * 테스트 3 〉	통과 (0.03ms, 52.2MB)
 * 테스트 4 〉	통과 (0.02ms, 52.7MB)
 * 테스트 5 〉	통과 (0.03ms, 52.3MB)
 * 테스트 6 〉	통과 (0.02ms, 51.7MB)
 * 테스트 7 〉	통과 (0.02ms, 51.6MB)
 * 테스트 8 〉	통과 (0.02ms, 53MB)
 * 테스트 9 〉	통과 (0.02ms, 52.7MB)
 * 테스트 10 〉	통과 (0.02ms, 52.2MB)
 * 테스트 11 〉	통과 (0.03ms, 52.5MB)
 * 테스트 12 〉	통과 (0.02ms, 52.5MB)
 * 테스트 13 〉	통과 (0.02ms, 52.6MB)
 * 테스트 14 〉	통과 (0.02ms, 52MB)
 * 테스트 15 〉	통과 (0.04ms, 52MB)
 * 테스트 16 〉	통과 (0.02ms, 52.5MB)
 * 테스트 17 〉	통과 (0.02ms, 52.8MB)
 * 
 * 효율성  테스트
 * 테스트 1 〉	통과 (11.88ms, 122MB)
 * 테스트 2 〉	통과 (13.10ms, 122MB)
 * 테스트 3 〉	통과 (14.28ms, 122MB)
 * 테스트 4 〉	통과 (13.54ms, 122MB)
 */