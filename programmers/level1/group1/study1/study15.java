/** programmers 문제풀이
 * 
 * ==========================================
 * 폰켓몬
 * 
 * 문제 설명
 * 총 N마리의 폰켓몬 중에서 N/2마리를 가져가려고 하는데 폰켓몬은 종류에 따라 번호룰 붙여
 * 구분합니다. 이 때 최대한 다른 종류의 폰켓몬을 선택하는 방법을 찾아, 그때의 폰켓몬 종류 
 * 번호의 개수를 return 하도록 solution 함수를 완성해주세요.
 * 
 * 제한사항
 *  nums는 폰켓몬의 종류 번호가 담긴 1차원 배열입니다.
 *  nums의 길이(N)는 1 이상 10,000 이하의 자연수이며, 항상 짝수로 주어집니다.
 *  폰켓몬의 종류 번호는 1 이상 200,000 이하의 자연수로 나타냅니다.
 *  가장 많은 종류의 폰켓몬을 선택하는 방법이 여러 가지인 경우에도, 선택할 수 있는 폰켓몬 종류 
 *  개수의 최댓값 하나만 return 하면 됩니다.
 * 
 * 입출력 예
 * nums	            result
 * [3,1,2,3]	    2
 * [3,3,3,2,2,4]	3
 * [3,3,3,2,2,2]	2
 * ===================================
 * 
 * 이문제는 종류는 200,000까지지만 nums의 길이는 10,000으로 제한되어 있다.
 * 이는 10,000개를 탐색해서 종류를 10,000개로 줄여서 하는 방식도 있을 수 있지만, 200,000종류를
 * 중복체크를 활용해서 답을 도출하는 방식도 있다.
 * 만약 종류가 int 범위 전체라면 시간이 더 걸리더라도 전체 탐색을 통해 종류를 줄이는 방식이
 * 효율적이지만 그렇지 않기에 이 방식을 사용하였다.
 */
public class study15 {
    public int solution(int[] nums) {
        //폰켓몬의 종류를 체크할 배열
        boolean[] check = new boolean[200001];
        
        int answer = 0;
        int n = nums.length;
        for(int i=0;i<n;i++){
            if(!check[nums[i]]){
                check[nums[i]] = true;
                answer++;
                //만약 n/2 이상의 종류가 있다면 다 다른 종류로 챙길 수 있으므로 이후는 무의미한
                //탐색이 되므로 중단 시킨다.
                if(answer==n/2){
                    return answer;
                }
            }
        }
        
        return answer;
    }
}
/**
 * 실행 결과
 * 테스트 1 〉	통과 (0.14ms, 52.9MB)
 * 테스트 2 〉	통과 (0.14ms, 52.8MB)
 * 테스트 3 〉	통과 (0.15ms, 52.7MB)
 * 테스트 4 〉	통과 (0.13ms, 53.7MB)
 * 테스트 5 〉	통과 (0.14ms, 52.3MB)
 * 테스트 6 〉	통과 (0.15ms, 52.5MB)
 * 테스트 7 〉	통과 (0.14ms, 52.1MB)
 * 테스트 8 〉	통과 (0.15ms, 52.9MB)
 * 테스트 9 〉	통과 (0.14ms, 52.3MB)
 * 테스트 10 〉	통과 (0.15ms, 52.9MB)
 * 테스트 11 〉	통과 (0.54ms, 52.6MB)
 * 테스트 12 〉	통과 (0.17ms, 52.5MB)
 * 테스트 13 〉	통과 (0.14ms, 52.4MB)
 * 테스트 14 〉	통과 (0.19ms, 54.1MB)
 * 테스트 15 〉	통과 (0.17ms, 52.2MB)
 * 테스트 16 〉	통과 (0.52ms, 53.2MB)
 * 테스트 17 〉	통과 (0.54ms, 52.9MB)
 * 테스트 18 〉	통과 (0.54ms, 53.9MB)
 * 테스트 19 〉	통과 (0.42ms, 53.8MB)
 * 테스트 20 〉	통과 (0.40ms, 53.3MB)
 */