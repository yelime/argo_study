/** programmers 문제풀이
 * 
 * ==========================================
 * 모의고사
 * 
 * 3명이 문제를 찍는데 다음과 같은 방식으로 찍습니다.
 *  1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
 *  2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
 *  3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...
 * 
 * 1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answes가 주어졌을 때, 가장 많은 
 * 문제를 맞은 사람이 누구인지 배열에 담아 return 하도록 solution함수를 작성해주세요.
 * 
 * 제한 조건
 *  시험은 최대 10,000 문제로 구성되어있습니다.
 *  문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
 *  가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.
 * 
 * 입출력 예
 * answers	    return
 * [1,2,3,4,5]	[1]
 * [1,3,2,4,2]	[1,2,3]
 * ===================================
 * 
 * 1번 패턴은 5개가 반복, 2번은 8개, 3번은 10개가 반복되는 패턴을 가지고 있지만,
 * 겹치는 번호는 40번째 마다 5로 겹치므로 40번 중 39번이 달라서 40번 하나 때문에 겹치는 문제를
 * 카운트에서 제외하는 것은 비효율 적이라 판단했고, 1번 2번 3번 규칙을 만들어 다 돌리기로 했다.
 * 
 * 1번의 경우 5의 배수는 5 그 외는 5로 나눈 나머지가 같은 번호를 찍는 규칙을 가지고,
 * 2번의 경우 홀수는 2 나머지는 1, 3, 4, 5 순으로 찍고,
 * 3번은 3,1,2,4,5를 2번 연속으로 찍는 규칙을 가지고 있다.
 */


class study5 {
    public int[] solution(int[] answers) {
        int[] answer = {};
        int[] count = new int[3];
        for(int i=0;i<answers.length;i++){
            //1번 규칙
            if(answers[i]==(i%5)+1){
                count[0]++;
            }

            int tmp = i/2;
            //2번 규칙
            if(i%2==0){
                if(answers[i]==2)
                    count[1]++;
            }
            else {
                if(tmp%4==0&&answers[i]==1)
                    count[1]++;
                else if(tmp%4==1&&answers[i]==3)
                    count[1]++;
                else if(tmp%4==2&&answers[i]==4)
                    count[1]++;
                else if(tmp%4==3&&answers[i]==5)
                    count[1]++;
            }
            //3번 규칙
            if(tmp%5==0&&answers[i]==3)
                count[2]++;
            else if(tmp%5==1&&answers[i]==1)
                count[2]++;
            else if(tmp%5==2&&answers[i]==2)
                count[2]++;
            else if(tmp%5==3&&answers[i]==4)
                count[2]++;
            else if(tmp%5==4&&answers[i]==5)
                count[2]++;
        }
        
        int max=count[0];
        int num=1;
        
        for(int i = 1;i<count.length;i++){
            if(count[i]==max)
                num++;
            else if(count[i]>max){
                max=count[i];
                num=1;
            }
        }
        
        answer = new int[num];
        int idx = 0;
        for(int i=0;i<3;i++){
            if(count[i]==max){
                answer[idx++]=i+1;
            }
        }
        
        return answer;
    }
}

/**
 * 실행 결과
 * 테스트 1 〉	통과 (0.03ms, 52.2MB)
 * 테스트 2 〉	통과 (0.02ms, 52.9MB)
 * 테스트 3 〉	통과 (0.02ms, 52.4MB)
 * 테스트 4 〉	통과 (0.02ms, 52MB)
 * 테스트 5 〉	통과 (0.03ms, 52.3MB)
 * 테스트 6 〉	통과 (0.05ms, 52.1MB)
 * 테스트 7 〉	통과 (0.97ms, 52.5MB)
 * 테스트 8 〉	통과 (0.35ms, 53.7MB)
 * 테스트 9 〉	통과 (1.73ms, 52.4MB)
 * 테스트 10 〉	통과 (0.53ms, 52.2MB)
 * 테스트 11 〉	통과 (1.74ms, 52.8MB)
 * 테스트 12 〉	통과 (1.56ms, 52.7MB)
 * 테스트 13 〉	통과 (0.13ms, 52.5MB)
 * 테스트 14 〉	통과 (1.72ms, 52.6MB)
 */