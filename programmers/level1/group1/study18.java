/** programmers 문제풀이
 * 
 * ==========================================
 * 예산
 * 
 * 문제 설명
 * S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 
 * 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 
 * 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대
 * 한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.
 * 
 * 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 
 * 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해
 * 야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.
 * 
 * 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 
 * 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 
 * solution 함수를 완성해주세요.
 * 
 * 제한사항
 * d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 
 * 1 이상 100 이하입니다.
 * d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 
 * 이상 100,000 이하의 자연수입니다.
 * budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.
 * 
 * 입출력 예
 * d	        budget	result
 * [1,3,2,5,4]	9	    3
 * [2,2,3,3]	10	    4
 * ===================================
 * 
 * 배열의 크기가 100이하로 크지 않은 양이므로 정렬을 작은순으로 하고 예산을 
 * 넘지 않을 때까지 더해주면 결과를 얻어 낼 수 있다.
 * 
 */

import java.util.*;

class study18 {
    public int solution(int[] d, int budget) {
        Arrays.sort(d);
        int answer = 0;
        int sum = 0;
        for(int n:d){
            sum+= n;
            if(sum>budget){
                break;
            }
            answer++;
        }
        
        return answer;
    }
}

/**
 * 실행 결과 
 * 테스트 1 〉	통과 (0.44ms, 53.1MB)
 * 테스트 2 〉	통과 (0.47ms, 51.8MB)
 * 테스트 3 〉	통과 (0.44ms, 52.1MB)
 * 테스트 4 〉	통과 (0.50ms, 52.6MB)
 * 테스트 5 〉	통과 (0.47ms, 52.4MB)
 * 테스트 6 〉	통과 (0.42ms, 52.1MB)
 * 테스트 7 〉	통과 (0.49ms, 53.1MB)
 * 테스트 8 〉	통과 (0.47ms, 52.7MB)
 * 테스트 9 〉	통과 (0.52ms, 52.7MB)
 * 테스트 10 〉	통과 (0.53ms, 52.7MB)
 * 테스트 11 〉	통과 (0.50ms, 52.7MB)
 * 테스트 12 〉	통과 (0.51ms, 52.3MB)
 * 테스트 13 〉	통과 (0.51ms, 52.1MB)
 * 테스트 14 〉	통과 (0.52ms, 51.9MB)
 * 테스트 15 〉	통과 (0.50ms, 53.1MB)
 * 테스트 16 〉	통과 (0.46ms, 52.2MB)
 * 테스트 17 〉	통과 (0.38ms, 52.8MB)
 * 테스트 18 〉	통과 (0.50ms, 51.6MB)
 * 테스트 19 〉	통과 (0.49ms, 52MB)
 * 테스트 20 〉	통과 (0.45ms, 52.3MB)
 * 테스트 21 〉	통과 (0.48ms, 55.7MB)
 * 테스트 22 〉	통과 (0.50ms, 52MB)
 * 테스트 23 〉	통과 (0.56ms, 52.2MB)
 */