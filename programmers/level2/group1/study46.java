/** programmers 문제풀이
 * 
 * ==========================================
 * 더 맵게
 * 문제 설명
 * 매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 
 * 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 
 * 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.
 * 
 * 섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 
 * 않은 음식의 스코빌 지수 * 2)
 * Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
 * Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주
 * 어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수
 * 를 return 하도록 solution 함수를 작성해주세요.
 * 
 * 제한 사항
 * scoville의 길이는 2 이상 1,000,000 이하입니다.
 * K는 0 이상 1,000,000,000 이하입니다.
 * scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
 * 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
 * 
 * 입출력 예
 * scoville	                K	return
 * [1, 2, 3, 9, 10, 12]	    7	2
 * ===================================
 * 
 * 이 문제는 제일 작은 값과 다음으로 작은 값을 합쳐서 배열의 크기는 1씩 작아지고, 
 * 더한 걸 추가하는데 최소 값이 아닐 수 있으므로 정렬을 계속해주어야 한다.
 * 가장 적절한 방식은 우선 순위 큐를 이용해 값을 넣어줌과 동시에 정렬을 해주는게
 * 좋다고 판단 되어 사용하였고, 넣을 때 K보다 클경우는 필요 없으므로 q에 넣지 않았다.
 * 
 */

import java.util.*;

public class study46 {
    public int solution(int[] scoville, int K) {
        PriorityQueue<Integer> q = new PriorityQueue<Integer>();
        Arrays.sort(scoville);
        for(int n : scoville){
            q.add(n);
            if(n>K){
                break;
            }
        }
        int a = q.poll();
        int answer = 0;
        while(!q.isEmpty()){
            int b = q.poll();
            int tmp = a+(b*2);
            q.add(tmp);
            a= q.poll();
            answer++;
            
            if(a>=K){
                break;
            }
        }
        if(a<K){
            answer = -1;
        }
        
        return answer;
    }
}
/**
 * 실행 결과
 * 정확성  테스트
 * 테스트 1 〉	통과 (0.83ms, 52.2MB)
 * 테스트 2 〉	통과 (0.89ms, 52.6MB)
 * 테스트 3 〉	통과 (0.68ms, 52.3MB)
 * 테스트 4 〉	통과 (0.86ms, 53.1MB)
 * 테스트 5 〉	통과 (0.89ms, 52.3MB)
 * 테스트 6 〉	통과 (4.22ms, 52.1MB)
 * 테스트 7 〉	통과 (4.17ms, 53.3MB)
 * 테스트 8 〉	통과 (1.54ms, 52.7MB)
 * 테스트 9 〉	통과 (1.42ms, 53.3MB)
 * 테스트 10 〉	통과 (3.45ms, 53.5MB)
 * 테스트 11 〉	통과 (2.60ms, 52.8MB)
 * 테스트 12 〉	통과 (4.17ms, 53MB)
 * 테스트 13 〉	통과 (3.89ms, 52.8MB)
 * 테스트 14 〉	통과 (0.97ms, 53MB)
 * 테스트 15 〉	통과 (4.37ms, 53.4MB)
 * 테스트 16 〉	통과 (0.89ms, 52.2MB)
 * 효율성  테스트
 * 테스트 1 〉	통과 (181.30ms, 67MB)
 * 테스트 2 〉	통과 (379.06ms, 89.5MB)
 * 테스트 3 〉	통과 (999.80ms, 127MB)
 * 테스트 4 〉	통과 (213.88ms, 66.4MB)
 * 테스트 5 〉	통과 (1244.20ms, 126MB)
 */